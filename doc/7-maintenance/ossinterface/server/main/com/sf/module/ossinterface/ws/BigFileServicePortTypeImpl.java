package com.sf.module.ossinterface.ws;

import java.io.File;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sf.esb.service.bigfileservice.tcasinterface.BigFileServicePortType;
import com.sf.esb.service.bigfileservice.tcasinterface.EsbSoapHeaderType;
import com.sf.esb.service.bigfileservice.tcasinterface.SBODYType2;
import com.sf.esb.service.bigfileservice.tcasinterface.SBODYType5;
import com.sf.esb.service.bigfileservice.tcasinterface.SHEADType1;
import com.sf.esb.service.bigfileservice.tcasinterface.SHEADType3;
import com.sf.module.common.util.CommonUtil;
import com.sf.module.ossinterface.biz.BigFileDataHandlerBiz;
import com.sf.module.ossinterface.util.BigFileDataHandlerParament;
import com.sf.module.ossinterface.util.ESBBigFileUtil;
import com.sf.sftp.client.infoBean.DownloadStrategyInfoBean;
import com.sf.sftp.client.infoBean.UploadStrategyInfoBean;

/**
 * This class was generated by Apache CXF 2.5.0 2014-05-29T16:53:20.422+08:00
 * Generated source version: 2.5.0
 * 
 */

@javax.jws.WebService(serviceName = "BigFileService", portName = "BigFileServiceEndpoint", targetNamespace = "http://www.sf-express.com/esb/service/BigFileService/wsdl", endpointInterface = "com.sf.esb.service.bigfileservice.tcasinterface.BigFileServicePortType")
public class BigFileServicePortTypeImpl implements BigFileServicePortType {

	// private static final Logger LOG =
	// Logger.getLogger(BigFileServicePortTypeImpl.class.getName());
	private static final Logger LOG = LoggerFactory
			.getLogger(BigFileServicePortTypeImpl.class);

	/**
	 * <pre>
	 * 数据下载失败，请求重发服务对象
	 * </pre>
	 * 
	 * @author 文俊 (337291)
	 * @date Jun 4, 2014
	 * @return
	 */
	// public
	// com.sf.esb.client.bigfileresend.tcasinterface.BigFileResendDataPortType
	// getBigFileResendDataPortType() {
	// return new
	// com.sf.module.tcasinterface.ws.client.BigFileResendDataPortTypeImpl();
	// }

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.sf.esb.service.bigfileservice.tcasinterface.BigFileServicePortType
	 * #bigFileService
	 * (com.sf.esb.service.bigfileservice.tcasinterface.SHEADType1 shead
	 * ,)com.sf.esb.service.bigfileservice.tcasinterface.SBODYType2 sbody
	 * ,)com.sf.esb.service.bigfileservice.tcasinterface.EsbSoapHeaderType
	 * esbSoapHeader1
	 * ,)com.sf.esb.service.bigfileservice.tcasinterface.SHEADType3 shead1
	 * ,)com.sf.esb.service.bigfileservice.tcasinterface.SBODYType5 sbody1
	 * ,)com.sf.esb.service.bigfileservice.tcasinterface.EsbSoapHeaderType
	 * esbSoapHeader2 )*
	 */
	public void bigFileService(
			com.sf.esb.service.bigfileservice.tcasinterface.SHEADType1 shead,
			com.sf.esb.service.bigfileservice.tcasinterface.SBODYType2 sbody,
			EsbSoapHeaderType esbSoapHeader1,
			javax.xml.ws.Holder<SHEADType3> shead1,
			javax.xml.ws.Holder<SBODYType5> sbody1,
			javax.xml.ws.Holder<EsbSoapHeaderType> esbSoapHeader2) {
		LOG.info("Executing operation bigFileService");
		System.out.println(shead);
		System.out.println(sbody);
		System.out.println(esbSoapHeader1);
		try {
			
			BigFileDataHandlerParament param = buildParam(sbody, shead);
			//保存开始下载任务日志
			Long logId = BigFileDataHandlerBiz.getInstance().saveLog(param, null);
			param.setLogId(logId);
			
			if (logId == null) {
				throw new RuntimeException("operation bigFileService Failure");
			}
			
			com.sf.esb.service.bigfileservice.tcasinterface.SHEADType3 shead1Value = new SHEADType3();
			shead1.value = shead1Value;
			com.sf.esb.service.bigfileservice.tcasinterface.SBODYType5 sbody1Value = new SBODYType5();
			sbody1.value = sbody1Value;
			com.sf.esb.service.bigfileservice.tcasinterface.EsbSoapHeaderType esbSoapHeader2Value = new EsbSoapHeaderType();
			esbSoapHeader2.value = esbSoapHeader2Value;
			
			
			new FileDownloadHandlerThread(param).start();
			
			sbody1Value.setResult("SUCCESS");
			
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			LOG.error("operation bigFileService Failure", ex);
			throw new RuntimeException(ex);
		}
		LOG.info("Complete operation bigFileService");
	}
	
	
	/**
	 * <pre>
	 * </pre>
	 * @author 文俊 (337291)
	 * @date Jun 23, 2014 
	 * @return
	 */
	private BigFileDataHandlerParament buildParam(SBODYType2 sbody, SHEADType1 shead) {
		
		String selfSystemId = ESBBigFileUtil.Config.SELF_SYSTEM_ID;
		String journalId = null;
		
		journalId = ESBBigFileUtil.generateJournalId(selfSystemId,
				sbody.getDataType());

		return new BigFileDataHandlerParament(false,
				shead.getSYSTEMID(), sbody.getDataType(), selfSystemId,
				sbody.getTimeStamp(), journalId, null, sbody.getMd5(),
				sbody.getFilePath(), sbody.getFileName(), sbody.getIsZip());
		
	}
	

	/**
	 * 文件下载线程类
	 * 
	 * @author 文俊 (337291) May 29, 2014
	 */
	class FileDownloadHandlerThread extends Thread {

//		private SBODYType2 sbody;
//		private SHEADType1 shead;

		/**
		 * @author 文俊 (337291)
		 * @date May 29, 2014
		 */
//		public FileDownloadHandlerThread(SBODYType2 sbody, SHEADType1 shead) {
//			this.sbody = sbody;
//			this.shead = shead;
//		}
		
		private BigFileDataHandlerParament param;
		/**
		 * 
		 * @author 文俊 (337291)
		 * @date Jun 23, 2014 
		 * @param param
		 */
		public FileDownloadHandlerThread(BigFileDataHandlerParament param) {
			this.param = param;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see java.lang.Thread#run()
		 * 
		 * @author 文俊 (337291)
		 * 
		 * @date May 29, 2014
		 */
		@Override
		public void run() {
			LOG.info("Executing operation FileDownloadHandlerThread");
//			System.out.println(shead);
//			System.out.println(sbody);
			System.out.println(param);

			// 文件下载
			int trytime = ESBBigFileUtil.Config.TRY_TIME;
			long sleep = ESBBigFileUtil.Config.INTERVAL_MILLIS;
			boolean isSuccess = false;
			List<File> fileList = null;
			String downloadPath="";
			try{
				downloadPath =CommonUtil.getHrXmlSavePath();
			}catch (Exception e) {
				LOG.error("Read HrXmlSavePath Error");
				return;
			}
		

			try {

				// 通过报文还原上传策略
				UploadStrategyInfoBean uploadStrategyInfo = new UploadStrategyInfoBean();
				uploadStrategyInfo.setBlMd5(param.getMd5Code() != null
						&& "".equals(param.getMd5Code()));
				uploadStrategyInfo.setStrMd5Code(param.getMd5Code());
				uploadStrategyInfo.setStrRemotePath(param.getRemotePath());
				uploadStrategyInfo.setStrRemoteFileName(param.getRemoteFileName());
				uploadStrategyInfo.setBlZipCompress(Boolean.valueOf(param
						.getIsZip()));

				// 配置下载策略
				DownloadStrategyInfoBean downloadStrategyInfo = new DownloadStrategyInfoBean();
				downloadStrategyInfo.setUploadStrategyInfo(uploadStrategyInfo);
				downloadStrategyInfo.setDownloadPath(downloadPath);

				// 重新尝试下载机制：下载失败多次尝试重新下载降低网络等因素的风险
				while (!isSuccess && trytime > 0) {
					trytime--;
					try {
						fileList = SftipUtil.downLoad(downloadStrategyInfo);
						// 当次下载结果判断
						isSuccess = !(fileList == null || fileList.isEmpty());
						if (!isSuccess) {
							// 间隔十秒重新下载
							sleep(sleep);
						}
					} catch (Exception e) {
						LOG.error(
								String.format(
										"thread FileDownloadHandlerThread sftp downLoad %s trytime file Failure",
										trytime), e);
						e.printStackTrace();
					}
				}

				param.setFileList(fileList);
				param.setIsSuccess(isSuccess);
				
				LOG.info("Complete operation FileDownloadHandlerThread");
			} catch (Exception e) {
				LOG.error("thread FileDownloadHandlerThread Failure", e);
				e.printStackTrace();
			}

			BigFileDataHandlerBiz.getInstance().handler(param);
			
		}

	}

}
