package com.sf.module.report.dao;

public class StatisticsReportRepository {

	public static final String SQL_QUERY_STATISTICS_REPORT_COUNT = ""
			+ " select count(*) totalSize  \n "
			+ "   from op_attendance_count_report t \n "
			// +"    where t.dept_code = :departmentCode \n "
			+ "   where t.dept_code in (SELECT DEPT_CODE FROM TM_DEPARTMENT START WITH DEPT_CODE IN :departmentCode CONNECT BY PRIOR DEPT_CODE = PARENT_DEPT_CODE) \n "
			+ "   and t.day_of_month>= to_date(:startTime,'YYYY/MM/DD') \n "
			+ "   and t.day_of_month<= to_date(:endTime,'YYYY/MM/DD') \n ";

	public static final String SQL_QUERY_STATISTICS_REPORT_LIST = ""
			+ " select * \n "
			+ "   from (select rownum rn, t.* \n "
			+ "           from (select d.area_code, \n "
			+ "                        round((t.total_attendance_num / \n "
			+ "                              decode(t.total_emp_num, 0, 0.1, t.total_emp_num) * 100), \n "
			+ "                              0) || '%' total_attendance_percent, \n "
			+ "                        round((t.fulltime_attendance_num / \n "
			+ "                              decode(t.total_emp_num, 0, 0.1, t.total_emp_num) * 100), \n "
			+ "                              0) || '%' fulltime_emp_percent, \n "
			+ "                        round((t.not_fulltime_attendance_num / \n "
			+ "                              decode(t.total_emp_num, 0, 0.1, t.total_emp_num) * 100), \n "
			+ "                              0) || '%' not_fulltime_emp_percent, \n "
			+ "                        round((t.out_attendance_num / \n "
			+ "                              decode(t.total_emp_num, 0, 0.1, t.total_emp_num) * 100), \n "
			+ "                              0) || '%' out_emp_percent, \n "
			+ "                         round((t.TOTAL_SCHEDULING_NUM /  \n "
			+ "                               decode(t.TOTAL_EMP_NUM, 0, 0.1, t.TOTAL_EMP_NUM) * 100),  \n "
			+ "                               0) || '%' SCHEDULING_RATIO, \n "
			+ "                        t.* \n "
			+ "                   from op_attendance_count_report t, tm_department d \n "
			+ "                  where t.dept_code = d.dept_code \n "
			// + "            		   and t.dept_code = :departmentCode \n "
			+ "                    and t.dept_code in (SELECT DEPT_CODE FROM TM_DEPARTMENT START WITH DEPT_CODE IN :departmentCode CONNECT BY PRIOR DEPT_CODE = PARENT_DEPT_CODE)  \n "
			+ "                    and t.day_of_month >= to_date(:startTime, 'YYYY/MM/DD') \n "
			+ "                    and t.day_of_month <= to_date(:endTime, 'YYYY/MM/DD') \n "
			+ "                  order by t.day_of_month) t) t \n "
			+ "  where t.rn <= :limit \n " + "    and t.rn > :start \n "
			+ "  order by t.day_of_month \n " + "  \n ";

	public static final String EXPORT_STATISTICS_REPORT_SQL = " select * \n "
			+ "   from (select rownum rn, \n "
			+ "                d.area_code, \n "
			+ "                round((t.total_attendance_num / \n "
			+ "                      decode(t.total_emp_num, 0, 0.1, t.total_emp_num) * 100), \n "
			+ "                      0) || '%' total_attendance_percent, \n "
			+ "                round((t.fulltime_attendance_num / \n "
			+ "                      decode(t.total_emp_num, 0, 0.1, t.total_emp_num) * 100), \n "
			+ "                      0) || '%' fulltime_emp_percent, \n "
			+ "                round((t.not_fulltime_attendance_num / \n "
			+ "                      decode(t.total_emp_num, 0, 0.1, t.total_emp_num) * 100), \n "
			+ "                      0) || '%' not_fulltime_emp_percent, \n "
			+ "                round((t.out_attendance_num / \n "
			+ "                      decode(t.total_emp_num, 0, 0.1, t.total_emp_num) * 100), \n "
			+ "                      0) || '%' out_emp_percent, \n "
			+ "                round((t.TOTAL_SCHEDULING_NUM /  \n "
			+ "                               decode(t.TOTAL_EMP_NUM, 0, 0.1, t.TOTAL_EMP_NUM) * 100),  \n "
			+ "                               0) || '%' SCHEDULING_RATIO, \n "
			+ "                t.* \n "
			+ "           from op_attendance_count_report t, tm_department d \n "
			+ "          where t.dept_code = d.dept_code \n "
			+ "            and t.dept_code in (SELECT DEPT_CODE FROM TM_DEPARTMENT START WITH DEPT_CODE IN :departmentCode CONNECT BY PRIOR DEPT_CODE = PARENT_DEPT_CODE)  \n "
			+ "            and t.day_of_month >= to_date(:startTime, 'YYYY/MM/DD') \n "
			+ "            and t.day_of_month <= to_date(:endTime, 'YYYY/MM/DD')) t \n "
			+ "  order by t.day_of_month \n ";
}
