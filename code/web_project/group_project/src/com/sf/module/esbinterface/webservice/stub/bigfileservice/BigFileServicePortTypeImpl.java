/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.sf.module.esbinterface.webservice.stub.bigfileservice;

import java.io.File;
import java.util.List;
import javax.jws.WebService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.sf.module.esbinterface.biz.HrsEmpDataHandler;
import com.sf.module.esbinterface.domain.BigFileDataHandlerParameter;
import com.sf.module.esbinterface.util.Constants;
import com.sf.module.esbinterface.util.ESBBigFileUtil;
import com.sf.module.operation.util.CommonUtil;
import com.sf.sftp.client.ISftpClient;
import com.sf.sftp.client.SftpClientManager;
import com.sf.sftp.client.infoBean.DownloadStrategyInfoBean;
import com.sf.sftp.client.infoBean.UploadStrategyInfoBean;

/**
 * This class was generated by Apache CXF 2.7.10 2014-09-12T18:36:10.669+08:00
 * Generated source version: 2.7.10
 */

@WebService(serviceName = "BigFileService", portName = "BigFileServiceEndpoint", targetNamespace = "http://www.sf-express.com/esb/service/BigFileService/wsdl", endpointInterface = "com.sf.module.esbinterface.webservice.stub.bigfileservice.BigFileServicePortType")
public class BigFileServicePortTypeImpl implements BigFileServicePortType {
	private Logger LOG = LoggerFactory.getLogger(BigFileServicePortTypeImpl.class);
	private HrsEmpDataHandler handlerEmpData;

	public void setHandlerEmpData(HrsEmpDataHandler handlerEmpData) {
		this.handlerEmpData = handlerEmpData;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.sf.module.esbinterface.webservice.stub.bigfileservice.
	 * BigFileServicePortType
	 * #bigFileService(com.sf.module.esbinterface.webservice
	 * .stub.bigfileservice.SHEADType1 shead
	 * ,)com.sf.module.esbinterface.webservice.stub.bigfileservice.SBODYType2
	 * sbody
	 * ,)com.sf.module.esbinterface.webservice.stub.bigfileservice.EsbSoapHeaderType
	 * esbSoapHeader1
	 * ,)com.sf.module.esbinterface.webservice.stub.bigfileservice.SHEADType3
	 * shead1
	 * ,)com.sf.module.esbinterface.webservice.stub.bigfileservice.SBODYType5
	 * sbody1
	 * ,)com.sf.module.esbinterface.webservice.stub.bigfileservice.EsbSoapHeaderType
	 * esbSoapHeader2 )*
	 */
	public void bigFileService(
	        com.sf.module.esbinterface.webservice.stub.bigfileservice.SHEADType1 shead,
	        com.sf.module.esbinterface.webservice.stub.bigfileservice.SBODYType2 sbody,
	        EsbSoapHeaderType esbSoapHeader1,
	        javax.xml.ws.Holder<SHEADType3> shead1,
	        javax.xml.ws.Holder<SBODYType5> sbody1,
	        javax.xml.ws.Holder<EsbSoapHeaderType> esbSoapHeader2) {
		LOG.info("Executing operation bigFileService");
		System.out.println(shead);
		System.out.println(sbody);
		System.out.println(esbSoapHeader1);
		// Splitter.on(";").split(response);

		try {
			com.sf.module.esbinterface.webservice.stub.bigfileservice.SHEADType3 shead1Value = null;
			shead1.value = shead1Value;
			com.sf.module.esbinterface.webservice.stub.bigfileservice.SBODYType5 sbody1Value = null;
			sbody1.value = sbody1Value;
			com.sf.module.esbinterface.webservice.stub.bigfileservice.EsbSoapHeaderType esbSoapHeader2Value = null;
			esbSoapHeader2.value = esbSoapHeader2Value;
			BigFileDataHandlerParameter param = buildParam(sbody, shead);
			new FileDownloadHandlerThread(param).start();

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	private BigFileDataHandlerParameter buildParam(SBODYType2 sbody, SHEADType1 shead) {

		String selfSystemId = "SPMS";
		String journalId = ESBBigFileUtil.generateJournalId(selfSystemId, sbody.getDataType());

		return new BigFileDataHandlerParameter(
		        false,
		        shead.getSYSTEMID(),
		        sbody.getDataType(),
		        selfSystemId,
		        sbody.getTimeStamp(),
		        journalId,
		        null,
		        sbody.getMd5(),
		        sbody.getFilePath(),
		        sbody.getFileName(),
		        sbody.getIsZip());
	}

	class FileDownloadHandlerThread extends Thread {
		private BigFileDataHandlerParameter parameter;

		FileDownloadHandlerThread(BigFileDataHandlerParameter parameter) {
			this.parameter = parameter;
		}

		@Override
		public void run() {
			super.run();

			String downloadPath = "";
			try {
				downloadPath = CommonUtil.getHrXmlSavePath();
			} catch (Exception e) {
				LOG.error("Read HrXmlSavePath Error");
				return;
			}

			boolean isSuccess = false;
			try {

				// 通过报文还原上传策略
				UploadStrategyInfoBean uploadStrategyInfo = new UploadStrategyInfoBean();
				uploadStrategyInfo.setBlMd5(parameter.getMd5Code() != null && "".equals(parameter.getMd5Code()));
				uploadStrategyInfo.setStrMd5Code(parameter.getMd5Code());
				uploadStrategyInfo.setStrRemotePath(parameter.getRemotePath());
				uploadStrategyInfo.setStrRemoteFileName(parameter.getRemoteFileName());
				uploadStrategyInfo.setBlZipCompress(Boolean.valueOf(parameter.getIsZip()));

				// 配置下载策略
				DownloadStrategyInfoBean downloadStrategyInfo = new DownloadStrategyInfoBean();
				downloadStrategyInfo.setUploadStrategyInfo(uploadStrategyInfo);
				downloadStrategyInfo.setDownloadPath(downloadPath);

				int tryTime = Constants.TRY_TIME;
				List<File> fileList = null;
				// 重新尝试下载机制：下载失败多次尝试重新下载降低网络等因素的风险
				while (!isSuccess && tryTime > 0) {
					tryTime--;
					try {
						// 修改ESB读取配置规则
						// ISftpClient sftpClient =
						// SftpClientManager.getSftpClientInstance(Constants.ESB_CONFIG_RESOURCE_FILE,
						// "ESB");
						ISftpClient sftpClient = SftpClientManager.getSftpClientInstance(
						        System.getenv().get("CONF_PATH") + "/classes/ESBInfo.properties",
						        "ESB");
						fileList = sftpClient.downLoad(downloadStrategyInfo);
						// 当次下载结果判断
						isSuccess = !(fileList == null || fileList.isEmpty());
						if (!isSuccess) {
							// 间隔十秒重新下载
							sleep(10);
						}
					} catch (Exception e) {
						LOG.error(String.format("thread FileDownloadHandlerThread sftp downLoad %s tryTime file Failure", tryTime), e);
						e.printStackTrace();
					}
				}

				parameter.setFileList(fileList);
				parameter.setSuccess(isSuccess);
				handlerEmpData.handlerEmpData(parameter);

				LOG.info("Complete operation FileDownloadHandlerThread");
			} catch (Exception e) {
				LOG.error("thread FileDownloadHandlerThread Failure", e);
				e.printStackTrace();
			}

		}
	}

}
