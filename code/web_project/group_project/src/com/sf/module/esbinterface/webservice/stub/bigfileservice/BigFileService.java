package com.sf.module.esbinterface.webservice.stub.bigfileservice;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 2.7.10
 * 2014-09-12T18:36:10.743+08:00
 * Generated source version: 2.7.10
 */
@WebServiceClient(name = "BigFileService",
        wsdlLocation = "file:/E:/BigFileService/BigFileService.wsdl",
        targetNamespace = "http://www.sf-express.com/esb/service/BigFileService/wsdl")
public class BigFileService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.sf-express.com/esb/service/BigFileService/wsdl", "BigFileService");
    public final static QName BigFileServiceEndpoint = new QName("http://www.sf-express.com/esb/service/BigFileService/wsdl", "BigFileServiceEndpoint");

    static {
        URL url = null;
        try {
            url = new URL("file:/E:/BigFileService/BigFileService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(BigFileService.class.getName())
                    .log(java.util.logging.Level.INFO,
                            "Can not initialize the default wsdl from {0}", "file:/E:/BigFileService/BigFileService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public BigFileService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public BigFileService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public BigFileService() {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BigFileService(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BigFileService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BigFileService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName);
    }

    /**
     * @return returns BigFileServicePortType
     */
    @WebEndpoint(name = "BigFileServiceEndpoint")
    public BigFileServicePortType getBigFileServiceEndpoint() {
        return super.getPort(BigFileServiceEndpoint, BigFileServicePortType.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns BigFileServicePortType
     */
    @WebEndpoint(name = "BigFileServiceEndpoint")
    public BigFileServicePortType getBigFileServiceEndpoint(WebServiceFeature... features) {
        return super.getPort(BigFileServiceEndpoint, BigFileServicePortType.class, features);
    }

}
