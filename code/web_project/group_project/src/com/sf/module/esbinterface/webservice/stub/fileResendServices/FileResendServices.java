
/*
 * 
 */

package com.sf.module.esbinterface.webservice.stub.fileResendServices;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 2.2.10
 * Tue Aug 26 14:45:32 CST 2014
 * Generated source version: 2.2.10
 */


@WebServiceClient(name = "FileResendServices",
        wsdlLocation = "file:/E:/temp/esbwsdl/FileResendServices/FileResendServices.wsdl",
        targetNamespace = "http://www.sf-express.com/esb/service/FileResendServices/wsdl")
public class FileResendServices extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://www.sf-express.com/esb/service/FileResendServices/wsdl", "FileResendServices");
    public final static QName ESBServerSoapEndpoint = new QName("http://www.sf-express.com/esb/service/FileResendServices/wsdl", "ESBServerSoapEndpoint");

    static {
        URL url = null;
        try {
            url = new URL("file:/E:/temp/esbwsdl/FileResendServices/FileResendServices.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:/E:/temp/esbwsdl/FileResendServices/FileResendServices.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public FileResendServices(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public FileResendServices(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public FileResendServices() {
        super(WSDL_LOCATION, SERVICE);
    }


    /**
     * @return returns ESBServerPortType
     */
    @WebEndpoint(name = "ESBServerSoapEndpoint")
    public ESBServerPortType getESBServerSoapEndpoint() {
        return super.getPort(ESBServerSoapEndpoint, ESBServerPortType.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns ESBServerPortType
     */
    @WebEndpoint(name = "ESBServerSoapEndpoint")
    public ESBServerPortType getESBServerSoapEndpoint(WebServiceFeature... features) {
        return super.getPort(ESBServerSoapEndpoint, ESBServerPortType.class, features);
    }

}
