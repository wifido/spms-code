/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.sf.module.esbinterface.webservice.server.errorinfo;

import javax.jws.WebService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.sf.module.esb.biz.IDataTypeBiz;
import com.sf.module.esb.biz.INotify;
import com.sf.module.esb.biz.ProcessThread;
import com.sf.module.esb.dao.IBaseDao;
import com.sf.module.esb.dto.InParam;
import com.sf.module.esb.dto.TransactionLog;
import com.sf.module.esb.util.SftpTools;
import com.sf.module.esbinterface.biz.ISap2SpmsDataBiz;
import com.sf.module.esbinterface.domain.Sap2SpmsData;
import com.sf.sftp.client.SftpClientManager;

/**
 * This class was generated by Apache CXF 2.7.6 2014-10-31T16:40:22.524+08:00
 * Generated source version: 2.7.6
 */

@WebService(serviceName = "BigFileService", portName = "BigFileServiceEndpoint", targetNamespace = "http://www.sf-express.com/esb/service/BigFileService/wsdl", wsdlLocation = "com/sf/module/esbinterface/webservice/server/errorinfo/wsdl/BigFileService.wsdl", endpointInterface = "com.sf.module.esbinterface.webservice.server.errorinfo.BigFileServicePortType")
public class BigFileServicePortTypeImpl implements BigFileServicePortType {
	// private static final Logger LOG =
	// Logger.getLogger(BigFileServicePortTypeImpl.class.getName());
	private static final Logger LOG = LoggerFactory.getLogger(BigFileServicePortTypeImpl.class);

	private IDataTypeBiz dataTypeBiz;
	private ISap2SpmsDataBiz sap2SpmsDataBiz;

	public IDataTypeBiz getDataTypeBiz() {
		return dataTypeBiz;
	}

	public void setDataTypeBiz(IDataTypeBiz dataTypeBiz) {
		this.dataTypeBiz = dataTypeBiz;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.sf.module.esbinterface.webservice.server.errorinfo.BigFileServicePortType
	 * #bigFileService(com.sf.module.esbinterface.webservice.server.errorinfo.
	 * SHEADType1 shead
	 * ,)com.sf.module.esbinterface.webservice.server.errorinfo.SBODYType2 sbody
	 * ,
	 * )com.sf.module.esbinterface.webservice.server.errorinfo.EsbSoapHeaderType
	 * esbSoapHeader1
	 * ,)com.sf.module.esbinterface.webservice.server.errorinfo.SHEADType3
	 * shead1
	 * ,)com.sf.module.esbinterface.webservice.server.errorinfo.SBODYType5
	 * sbody1
	 * ,)com.sf.module.esbinterface.webservice.server.errorinfo.EsbSoapHeaderType
	 * esbSoapHeader2 )*
	 */
	public void bigFileService(
	        com.sf.module.esbinterface.webservice.server.errorinfo.SHEADType1 shead,
	        com.sf.module.esbinterface.webservice.server.errorinfo.SBODYType2 sbody,
	        EsbSoapHeaderType esbSoapHeader1,
	        javax.xml.ws.Holder<SHEADType3> shead1,
	        javax.xml.ws.Holder<SBODYType5> sbody1,
	        javax.xml.ws.Holder<EsbSoapHeaderType> esbSoapHeader2) {
		LOG.info("Executing operation bigFileService");
		LOG.info(String.valueOf(shead));
		LOG.info(String.valueOf(sbody));
		LOG.info(String.valueOf(esbSoapHeader1));
		try {

			// 0表示推送、1表示重发、2表示查询、3表示异常反馈
			final String tranMode = shead.getTRANMODE();
			// 主题类型
			final String dataType = sbody.getDataType();
			// 文件路径
			final String filePath = sbody.getFilePath();
			// 文件名称
			final String fileName = sbody.getFileName();
			// 时间戳
			final String timestamp = sbody.getTimeStamp();
			// 是否压缩 true压缩
			final String isZip = sbody.getIsZip();

			InParam inp = new InParam();
			inp.setDataType(dataType);
			inp.setFileName(fileName);
			inp.setFilePath(filePath);
			inp.setTranMode(tranMode);
			inp.setTimestamp(timestamp);
			inp.setIsZip(isZip);
			LOG.info("tranMode: " + tranMode + " dataType: " + dataType + " filePath: " + filePath + " fileName: " + fileName + " timeStamp: " + timestamp
			        + " isZip: " + isZip);

			// 记录请求
			IBaseDao ibaseDao = dataTypeBiz.getBaseDao();
			if (ibaseDao != null) {
				TransactionLog log = new TransactionLog();
				log.setDataType(dataType);
				log.setIsZip(isZip);
				log.setFileName(fileName);
				log.setFilePath(filePath);
				log.setTimeStamp(timestamp);
				log.setTranmode(tranMode);
				log.setStatus("RECE");
				// 设置为记录是否收到请求的日志类型
				log.setLogType(TransactionLog.LOGTYPE_LOGFORREQUEST);
				ibaseDao.insertLog(log);
			}

			com.sf.module.esbinterface.webservice.server.errorinfo.SHEADType3 shead1Value = new SHEADType3();
			shead1.value = shead1Value;
			com.sf.module.esbinterface.webservice.server.errorinfo.SBODYType5 sbody1Value = new SBODYType5();
			sbody1.value = sbody1Value;
			sbody1Value.setResult("SUCCESS");
			com.sf.module.esbinterface.webservice.server.errorinfo.EsbSoapHeaderType esbSoapHeader2Value = new EsbSoapHeaderType();
			esbSoapHeader2.value = esbSoapHeader2Value;

			if (dataType == null || "".equals(dataType)) {
				LOG.info("Rececive dataType is null;");
				sbody1Value.setResult("FAIL");
				sbody1.value = sbody1Value;
				return;
			} else {
				// 要继承这个接口
				INotify notify = new INotify() {

					public void success() {
						// 在此处添加处理成功之后执行的业务方法
						LOG.info("Executing success method...");
						LOG.info("dataType:" + dataType);

						Sap2SpmsData model = new Sap2SpmsData();
						model.setDataType(dataType);
						// 数据业务处理
						// sap2SpmsDataBiz.sap2SpmsDataDone(model);
					}

					public void warnning(String description) {
						// 假如下载失败或者处理过程中有部分成功，部分失败的情况下的预警处理方法。在此处添加
						LOG.info("Executing warnning method...");
						LOG.info("dataType:" + dataType);
					}

				};
				// 这一段是按主题来获取不同的ESB的FTP的配置文件----------并启动解析入库服务--------begin
				ProcessThread processThread = new ProcessThread(dataTypeBiz, inp, notify);
				if ("PMP_EPIEMP_ONE".equals(dataType) || "PMP_EPIEMP_ALL".equals(dataType) || "PMP_SYSGLTYPE_ALL".equals(dataType)) {
					String filePath2 = System.getenv().get("CONF_PATH") + "/classes/PMPESBInfo.properties";
					LOG.info("---PMP of ESBInfo.properties path:" + filePath2);

					inp.setEsbClientType(SftpClientManager.ESB_CLIENT_TYPE);
					inp.setEsbInfoPropPath(filePath2);

					SftpTools.setEsbConfigResourceFile(filePath2, SftpClientManager.ESB_CLIENT_TYPE, processThread);
				} else {
					String filePath2 = System.getenv().get("CONF_PATH") + "/classes/SAPESBInfo.properties";
					LOG.info("---SAP of ESBInfo.properties path:" + filePath2);

					inp.setEsbClientType(SftpClientManager.SAP_CLIENT_TYPE);
					inp.setEsbInfoPropPath(filePath2);

					SftpTools.setEsbConfigResourceFile(filePath2, SftpClientManager.SAP_CLIENT_TYPE, processThread);
				}
				processThread.start();
				// 这一段是按主题来获取不同的ESB的FTP的配置文件----------并启动解析入库服务--------end
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			LOG.error(ex.toString());
			throw new RuntimeException(ex);
		}
	}

	/**
	 * 重新处理失败的请求，如果失败的请求还有后续的请求，也要重新处理。重发触发界面请外围系统自己实现。
	 */
	public void bigFileServiceReProcess(InParam inp) {
		// 要继承这个接口
		INotify notify = new INotify() {

			public void success() {
				// 在此处添加处理成功之后执行的业务方法
				LOG.info("Executing success method...");
			}

			public void warnning(String description) {
				// 假如下载失败或者处理过程中有部分成功，部分失败的情况下的预警处理方法。在此处添加
				LOG.info("Executing warnning method...");
			}

		};
		dataTypeBiz.bigFileServiceReProcess(inp, notify);
	}

	public ISap2SpmsDataBiz getSap2SpmsDataBiz() {
		return sap2SpmsDataBiz;
	}

	public void setSap2SpmsDataBiz(ISap2SpmsDataBiz sap2SpmsDataBiz) {
		this.sap2SpmsDataBiz = sap2SpmsDataBiz;
	}
}
